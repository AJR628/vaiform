rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn()     { return request.auth != null; }
    function isSelf(uid)      { return isSignedIn() && request.auth.uid == uid; }
    function emailMatches(id) { return isSignedIn() && request.auth.token.email == id; }

    // Canonical users by UID
    match /users/{uid} {
      allow read: if isSignedIn() && request.auth.uid == uid;
      allow create: if isSignedIn() && request.auth.uid == uid
        && !(("plan" in request.resource.data) || ("credits" in request.resource.data) || ("membership" in request.resource.data));
      allow update: if isSignedIn() && request.auth.uid == uid
        && !(
          ("plan" in request.resource.data.diff().changedKeys())
          || ("credits" in request.resource.data.diff().changedKeys())
          || ("membership" in request.resource.data.diff().changedKeys())
        );

      match /generations/{genId} {
        allow read, write: if isSelf(uid);
      }

      match /transactions/{txId} {
        allow read: if isSelf(uid);
        allow create, update, delete: if false; // server-only via Admin SDK
      }
    }

    // Legacy email-keyed docs (temporary, read-only)
    match /usersByEmail/{emailId} {
      allow read: if emailMatches(emailId);
      allow write: if false;
    }

    // Private server-only collections
    match /pending_credits_by_email/{emailDoc} {
      allow read, write: if false;
    }
  }
}